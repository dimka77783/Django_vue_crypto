# backend/crypto_api/management/commands/run_parsers.py
from django.core.management.base import BaseCommand
from crypto_api.parsers.upcoming import main as run_upcoming
from crypto_api.parsers.investors import main as run_investors
from crypto_api.parsers.launchpads import main as run_launchpads
from crypto_api.parsers.tokenomics import main as run_tokenomics


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã: upcoming ‚Üí investors ‚Üí launchpads.py ‚Üí tokenomics'

    def handle(self, *args, **options):
        self.stdout.write("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê\n" + "=" * 60)

        self.stdout.write("\n1Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ upcoming-–ø—Ä–æ–µ–∫—Ç–æ–≤...")
        try:
            run_upcoming()
            self.stdout.write(self.style.SUCCESS("‚úÖ Upcoming-–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {e}"))

        self.stdout.write("\n2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤...")
        try:
            run_investors()
            self.stdout.write(self.style.SUCCESS("‚úÖ –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {e}"))

        self.stdout.write("\n3Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ launchpad-–ø–ª–∞—Ç—Ñ–æ—Ä–º...")
        try:
            run_launchpads()
            self.stdout.write(self.style.SUCCESS("‚úÖ Launchpad-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {e}"))

        self.stdout.write("\n4Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∏...")
        try:
            run_tokenomics()
            self.stdout.write(self.style.SUCCESS("‚úÖ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {e}"))

        self.stdout.write("\n" + "‚úÖ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–Å–ù\n" + "=" * 60)