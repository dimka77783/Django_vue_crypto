#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import time
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from selenium import webdriver
from selenium.webdriver.common.by import By
from datetime import datetime


# üî• –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–£–¢–¨ –î–õ–Ø SELENIUM –°–ê–ú–û–ô –ü–ï–†–í–û–ô –°–¢–†–û–ö–û–ô
os.environ['SELENIUM_CACHE_PATH'] = '/tmp/selenium'
os.makedirs('/tmp/selenium', exist_ok=True)


class CryptoRankUpcomingParser:
    """
    –ü–∞—Ä—Å–µ—Ä CryptoRank –¥–ª—è upcoming ICO –ø—Ä–æ–µ–∫—Ç–æ–≤
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É cryptorank_upcoming
    """

    def __init__(self):
        self.upcoming_url = "https://cryptorank.io/upcoming-ico"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
        self.db_config = {
            'host': os.environ.get('DB_HOST', 'postgres'),
            'port': os.environ.get('DB_PORT', '5432'),
            'database': os.environ.get('DB_NAME', 'crypto_db'),
            'user': os.environ.get('DB_USER', 'crypto_user'),
            'password': os.environ.get('DB_PASSWORD', 'crypto_password')
        }

    def get_db_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            conn = psycopg2.connect(**self.db_config)
            return conn
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None

    def setup_driver(self, headless=True):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
        options = webdriver.ChromeOptions()

        if headless:
            options.add_argument('--headless=new')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-plugins')
        options.add_argument('--disable-images')
        options.add_argument('--disable-web-security')
        options.add_argument('--allow-running-insecure-content')
        options.add_argument('--disable-features=VizDisplayCompositor')
        options.add_argument('--window-size=1920,1080')
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')

        # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        user_data_dir = f"/tmp/chrome_profile_{os.getpid()}"
        os.makedirs(user_data_dir, exist_ok=True)
        options.add_argument(f'--user-data-dir={user_data_dir}')

        try:
            driver = webdriver.Chrome(options=options)
            driver.implicitly_wait(10)
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
            return driver
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return None

    def convert_date_format(self, when_text):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç '14 Aug' ‚Üí '2025-08-14'"""
        if not when_text or 'TBA' in when_text.upper():
            return None, when_text

        try:
            from datetime import datetime as dt
            current_year = dt.now().year
            full_date_str = f"{when_text} {current_year}"
            parsed_date = dt.strptime(full_date_str, '%d %b %Y')
            return parsed_date.date(), when_text
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {when_text}")
            return None, when_text

    def extract_projects(self, driver):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        print("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        projects = []

        try:
            rows = driver.find_elements(By.CSS_SELECTOR, "tr[role='row']")
            print(f" ‚úì –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}")

            for idx, row in enumerate(rows):
                try:
                    cells = row.find_elements(By.TAG_NAME, "td")
                    if len(cells) < 7:
                        continue

                    # –ü—Ä–æ–µ–∫—Ç –∏ URL
                    project_cell = cells[1]
                    link = project_cell.find_element(By.TAG_NAME, "a")
                    project_name = link.text.strip()
                    project_url = link.get_attribute("href")

                    # –°–∏–º–≤–æ–ª
                    symbol_cell = cells[2]
                    project_symbol = symbol_cell.text.strip()

                    # –¢–∏–ø
                    type_cell = cells[3]
                    project_type = type_cell.text.strip()

                    # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
                    cap_cell = cells[4]
                    initial_cap = cap_cell.text.strip()

                    # IDO Raise
                    ido_cell = cells[5]
                    ido_raise = ido_cell.text.strip() if ido_cell.text.strip() != '-' else None

                    # –î–∞—Ç–∞
                    when_cell = cells[6]
                    when_text = when_cell.text.strip()

                    # Moni Score
                    moni_cell = cells[7]
                    moni_score = moni_cell.text.strip() if moni_cell.text.strip() != '-' else None

                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    project_data = {
                        'row_index': idx + 1,
                        'project': {
                            'name': project_name,
                            'symbol': project_symbol,
                            'url': project_url
                        },
                        'type': project_type,
                        'initial_cap': initial_cap,
                        'ido_raise': ido_raise,
                        'when': when_text,
                        'moni_score': moni_score,
                        'investors': [],
                        'launchpad': []
                    }

                    if project_url and '/ico/' in project_url:
                        projects.append(project_data)

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            return projects

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return []

    def merge_lists(self, existing, new_list):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        combined = existing.copy() if existing else []
        for item in new_list:
            if item not in combined:
                combined.append(item)
        return combined

    def save_to_database(self, projects):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É cryptorank_upcoming"""
        if not projects:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        conn = self.get_db_connection()
        if not conn:
            return

        cursor = conn.cursor()
        new_count = 0
        updated_count = 0
        skipped_count = 0

        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...")
        try:
            for project in projects:
                project_info = project.get('project', {})
                url = project_info.get('url')
                if not url:
                    skipped_count += 1
                    continue

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                when_text = project.get('when')
                launch_date, launch_date_original = self.convert_date_format(when_text)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ URL
                cursor.execute("""
                    SELECT id, updated_at, investors, launchpad 
                    FROM cryptorank_upcoming 
                    WHERE project_url = %s
                """, (url,))
                existing = cursor.fetchone()

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data_tuple = (
                    project.get('row_index'),
                    project_info.get('name'),
                    project_info.get('symbol'),
                    url,
                    project.get('type'),
                    project.get('initial_cap'),
                    project.get('ido_raise'),
                    launch_date,
                    launch_date_original,
                    project.get('moni_score'),
                    json.dumps(project.get('investors', [])),
                    json.dumps(project.get('launchpad', []))
                )

                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    existing_id = existing[0]
                    existing_investors = existing[2] if existing[2] else []
                    existing_launchpad = existing[3] if existing[3] else []

                    # –°–ª–∏—è–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏ launchpad
                    merged_investors = self.merge_lists(existing_investors, project.get('investors', []))
                    merged_launchpad = self.merge_lists(existing_launchpad, project.get('launchpad', []))

                    cursor.execute("""
                        UPDATE cryptorank_upcoming SET
                            row_index = %s,
                            project_name = %s,
                            project_symbol = %s,
                            project_type = %s,
                            initial_cap = %s,
                            ido_raise = %s,
                            launch_date = %s,
                            launch_date_original = %s,
                            moni_score = %s,
                            investors = %s::jsonb,
                            launchpad = %s::jsonb,
                            updated_at = CURRENT_TIMESTAMP,
                            parsed_at = CURRENT_TIMESTAMP
                        WHERE project_url = %s
                    """, (
                        project.get('row_index'),
                        project_info.get('name'),
                        project_info.get('symbol'),
                        project.get('type'),
                        project.get('initial_cap'),
                        project.get('ido_raise'),
                        launch_date,
                        launch_date_original,
                        project.get('moni_score'),
                        json.dumps(merged_investors),
                        json.dumps(merged_launchpad),
                        url
                    ))
                    updated_count += 1
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    cursor.execute("""
                        INSERT INTO cryptorank_upcoming (
                            row_index, project_name, project_symbol, project_url,
                            project_type, initial_cap, ido_raise, launch_date,
                            launch_date_original, moni_score, investors, launchpad,
                            parsed_at, updated_at
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s::jsonb, %s::jsonb, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                    """, data_tuple)
                    new_count += 1

            conn.commit()
            print("üìä –ò—Ç–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
            print(f" ‚úÖ –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {new_count}")
            print(f" üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
            print(f" ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            conn.rollback()
        finally:
            cursor.close()
            conn.close()

    def get_database_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ë–î"""
        conn = self.get_db_connection()
        if not conn:
            return

        cursor = conn.cursor(cursor_factory=RealDictCursor)
        try:
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            cursor.execute("SELECT * FROM get_upcoming_stats()")
            stats = cursor.fetchone()
            if stats:
                print(f" üìà –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {stats['total_projects']}")
                print(f" ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_projects']}")
                print(f" üìÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats['this_week']}")
                print(f" üóìÔ∏è –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {stats['this_month']}")
                print(f" üí∞ –° –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π: {stats['with_initial_cap']}")
                if stats['avg_moni_score']:
                    print(f" ‚≠ê –°—Ä–µ–¥–Ω–∏–π Moni Score: {stats['avg_moni_score']}")

            # –ë–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
            cursor.execute("SELECT * FROM upcoming_soon LIMIT 5")
            upcoming = cursor.fetchall()
            if upcoming:
                print(f"üöÄ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø—É—Å–∫–∏:")
                for project in upcoming:
                    days = project['days_until_launch']
                    print(f" ‚Ä¢ {project['project_name']} ({project['project_symbol']}) - —á–µ—Ä–µ–∑ {days:.0f} –¥–Ω–µ–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            cursor.close()
            conn.close()

    def save_results(self, data, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'cryptorank_upcoming_{timestamp}.json'
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
            return None

    def parse_table(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã"""
        driver = None
        try:
            print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞: {self.upcoming_url}")
            driver = self.setup_driver(headless=True)
            driver.get(self.upcoming_url)
            time.sleep(3)
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)

            projects = self.extract_projects(driver)

            result = {
                'source_url': self.upcoming_url,
                'parsed_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'total_projects': len(projects),
                'projects': projects
            }
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

        finally:
            if driver is not None:
                try:
                    driver.quit()
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ driver.quit(): {e}")
                # üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                os.system("killall -q chrome chromedriver 2>/dev/null || true")
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)")

    def main(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        print("üöÄ –ü–ê–†–°–ï–† UPCOMING ICO –ü–†–û–ï–ö–¢–û–í")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É: cryptorank_upcoming")
        print("=" * 60)

        parser = CryptoRankUpcomingParser()
        result = parser.parse_table()

        if result:
            parser.save_to_database(result['projects'])
            parser.get_database_stats()
            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ!")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {result.get('total_projects', 0)}")
        else:
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
        print("=" * 60)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Django/Celery"""
    CryptoRankUpcomingParser().main()


# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
if __name__ == "__main__":
    main()