#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import time
import psycopg2
from psycopg2.extras import RealDictCursor
from selenium import webdriver
from selenium.webdriver.common.by import By
from datetime import datetime
import os


class CryptoRankUpcomingParser:
    """
    –ü–∞—Ä—Å–µ—Ä CryptoRank –¥–ª—è upcoming ICO –ø—Ä–æ–µ–∫—Ç–æ–≤
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É cryptorank_upcoming
    """

    def __init__(self):
        self.upcoming_url = "https://cryptorank.io/upcoming-ico"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
        self.db_config = {
            'host': os.environ.get('DB_HOST', 'localhost'),
            'port': os.environ.get('DB_PORT', '5432'),
            'database': os.environ.get('DB_NAME', 'crypto_db'),
            'user': os.environ.get('DB_USER', 'crypto_user'),
            'password': os.environ.get('DB_PASSWORD', 'crypto_password')
        }

    def get_db_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            conn = psycopg2.connect(**self.db_config)
            return conn
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None

    def setup_driver(self, headless=True):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")

        options = webdriver.ChromeOptions()

        if headless:
            options.add_argument('--headless=new')

        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-images')
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')

        driver = webdriver.Chrome(options=options)
        driver.implicitly_wait(5)

        print("   ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
        return driver

    def extract_name_from_url(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL"""
        try:
            slug = url.split('/ico/')[-1].split('?')[0]
            name = slug.replace('-', ' ').title()
            return name
        except:
            return "Unknown Project"

    def extract_name_and_symbol_from_element(self, element):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            text = element.text.strip()

            # –ï—Å–ª–∏ –µ—Å—Ç—å \n - —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
            if '\n' in text:
                parts = text.split('\n')
                name = parts[0].strip()
                symbol = parts[1].strip() if len(parts) > 1 and parts[1].strip() else None
                return name, symbol

            # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            return text, None

        except:
            return element.text.strip() if element.text else "Unknown", None

    def convert_date_format(self, date_text):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ '22 Jul' –≤ 'YYYY-MM-DD'"""
        if not date_text or date_text == 'TBA':
            return None, date_text

        try:
            # –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
            months = {
                'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',
                'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08',
                'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'
            }

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ "22 Jul" –∏–ª–∏ "1 Aug"
            parts = date_text.strip().split()
            if len(parts) >= 2:
                day = parts[0].zfill(2)  # –î–æ–±–∞–≤–ª—è–µ–º 0 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: 1 -> 01
                month_text = parts[1][:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞ –º–µ—Å—è—Ü–∞

                if month_text in months:
                    month = months[month_text]
                    year = '2025'  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                    return f"{year}-{month}-{day}", date_text

            return None, date_text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å

        except Exception:
            return None, date_text

    def clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return None

        text = text.strip()

        # –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if not text or text in ['-', '‚Äì', 'N/A', 'TBD', '']:
            return None

        return text

    def merge_arrays(self, existing_array, new_array):
        """
        –£–º–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ investors/launchpad
        –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –±–µ–∑ –¥—É–±–ª–µ–π
        """
        if not new_array:  # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π
            return existing_array if existing_array else []

        if not existing_array:  # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π
            return new_array

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã –±–µ–∑ –¥—É–±–ª–µ–π
        combined = list(existing_array)
        for item in new_array:
            if item not in combined:
                combined.append(item)

        return combined

    def parse_table(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã"""
        driver = self.setup_driver(headless=True)

        try:
            print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞: {self.upcoming_url}")
            driver.get(self.upcoming_url)
            time.sleep(3)

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
            projects = self.extract_projects(driver)

            result = {
                'source_url': self.upcoming_url,
                'parsed_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'total_projects': len(projects),
                'projects': projects
            }

            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
        finally:
            driver.quit()

    def extract_projects(self, driver):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        print("   üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...")

        projects = []
        seen_urls = set()

        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã
            ico_links = driver.find_elements(By.XPATH, "//a[contains(@href, '/ico/')]")
            print(f"      ‚úì –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(ico_links)}")

            for link in ico_links:
                try:
                    url = link.get_attribute('href')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
                    if not self.is_valid_ico_url(url) or url in seen_urls:
                        continue

                    seen_urls.add(url)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    project_data = self.extract_project_data(link, url, len(projects) + 1)

                    if project_data:
                        projects.append(project_data)
                        name = project_data['project']['name']
                        symbol = project_data['project']['symbol']
                        when = project_data.get('when', 'N/A')
                        print(f"      ‚úÖ {len(projects):2d}. {name} ({symbol or 'N/A'}) - {when}")

                except Exception:
                    continue

        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")

        return projects

    def extract_project_data(self, link, url, index):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–æ–∫—É
            parent_row = self.find_table_row(link)
            if not parent_row:
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª –∏–∑ —Å—Å—ã–ª–∫–∏
            display_name, display_symbol = self.extract_name_and_symbol_from_element(link)

            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏–∑ URL
            if display_name and len(display_name) > 3 and display_name != "Unknown":
                final_name = display_name
                final_symbol = display_symbol
            else:
                final_name = self.extract_name_from_url(url)
                final_symbol = None

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
            cells = parent_row.find_elements(By.TAG_NAME, "td")

            project_data = {
                'row_index': index,
                'project': {
                    'name': final_name,
                    'symbol': final_symbol,
                    'url': url
                },
                'investors': [],
                'launchpad': []
            }

            # –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            for i, cell in enumerate(cells[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ)
                text = self.clean_text(cell.text)
                if not text:
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                if text in ['IDO', 'ICO', 'IEO', 'Private', 'Pre-sale', 'KOL'] or any(
                        t in text for t in ['IDO', 'ICO', 'Private']):
                    project_data['type'] = text
                elif text.startswith('$') and any(c in text for c in 'KMB'):
                    # –î–µ–Ω–µ–∂–Ω–∞—è —Å—É–º–º–∞
                    if 'initial_cap' not in project_data:
                        project_data['initial_cap'] = text
                    else:
                        project_data['ido_raise'] = text
                elif any(platform in text for platform in
                         ['Seedify', 'Polkastarter', 'Spores Network', 'AITECH PAD', 'Binance Wallet', 'Coinlist',
                          'FireStarter', 'TrustPad', 'Koistarter', 'TruePNL', 'WeWay', 'ChainGPT Pad', 'Agentlauncher',
                          'StarLaunch', 'LEGION', 'Tokensoft', 'BinStarter', 'BullPerks', 'BSCS', 'RazrFi']):
                    # –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ launchpad - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
                    pass
                elif any(month in text for month in
                         ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
                          'Dec']) or text == 'TBA':
                    project_data['when'] = text
                elif text.isdigit():
                    project_data['moni_score'] = text

            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º investors –∏ launchpad
            project_data = {k: v for k, v in project_data.items() if v or k in ['investors', 'launchpad']}

            # –ù–µ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–∞—Ç–∞ TBA
            if project_data.get('when') == 'TBA':
                return None

            return project_data if len(project_data) >= 3 else None

        except Exception:
            return None

    def find_table_row(self, link):
        """–ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π tr –∏–ª–∏ div
            ancestors = [
                "./ancestor::tr[1]",
                "./ancestor::div[contains(@class, 'row')][1]",
                "./ancestor::div[position()<=3]"
            ]

            for ancestor_xpath in ancestors:
                try:
                    parent = link.find_element(By.XPATH, ancestor_xpath)
                    if parent and len(parent.text.strip()) > 20:
                        return parent
                except:
                    continue

            return None
        except:
            return None

    def is_valid_ico_url(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL"""
        if not url or '/ico/' not in url:
            return False

        exclude = ['/categories/', '/exchanges/', '/coins/', '/price/']
        return not any(ex in url for ex in exclude)

    def save_to_database(self, projects):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É cryptorank_upcoming"""
        if not projects:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        conn = self.get_db_connection()
        if not conn:
            return

        cursor = conn.cursor()
        saved_count = 0
        updated_count = 0
        skipped_count = 0

        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...")

        try:
            for project in projects:
                project_info = project.get('project', {})
                url = project_info.get('url')

                if not url:
                    skipped_count += 1
                    continue

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                when_text = project.get('when')
                launch_date, launch_date_original = self.convert_date_format(when_text)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ URL
                cursor.execute("""
                    SELECT id, updated_at, investors, launchpad FROM cryptorank_upcoming 
                    WHERE project_url = %s
                """, (url,))

                existing = cursor.fetchone()

                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    existing_id = existing[0]
                    existing_investors = existing[2] if existing[2] else []
                    existing_launchpad = existing[3] if existing[3] else []

                    # –£–º–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã
                    new_investors = project.get('investors', [])
                    new_launchpad = project.get('launchpad', [])

                    merged_investors = self.merge_arrays(existing_investors, new_investors)
                    merged_launchpad = self.merge_arrays(existing_launchpad, new_launchpad)

                    cursor.execute("""
                        UPDATE cryptorank_upcoming SET
                            project_name = %s,
                            project_symbol = %s,
                            project_type = %s,
                            initial_cap = %s,
                            ido_raise = %s,
                            launch_date = %s,
                            launch_date_original = %s,
                            moni_score = %s,
                            investors = %s::jsonb,
                            launchpad = %s::jsonb,
                            row_index = %s,
                            updated_at = CURRENT_TIMESTAMP
                        WHERE id = %s
                    """, (
                        project_info.get('name'),
                        project_info.get('symbol'),
                        project.get('type'),
                        project.get('initial_cap'),
                        project.get('ido_raise'),
                        launch_date,
                        launch_date_original,
                        project.get('moni_score'),
                        json.dumps(merged_investors),
                        json.dumps(merged_launchpad),
                        project.get('row_index'),
                        existing_id
                    ))

                    updated_count += 1

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    investors_changed = len(merged_investors) > len(existing_investors)
                    launchpad_changed = len(merged_launchpad) > len(existing_launchpad)
                    change_info = ""
                    if investors_changed:
                        change_info += f" [+{len(merged_investors) - len(existing_investors)} investors]"
                    if launchpad_changed:
                        change_info += f" [+{len(merged_launchpad) - len(existing_launchpad)} launchpad]"

                    print(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {project_info.get('name')} ({project_info.get('symbol')}){change_info}")

                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    cursor.execute("""
                        INSERT INTO cryptorank_upcoming (
                            row_index, project_name, project_symbol, project_url,
                            project_type, initial_cap, ido_raise, launch_date,
                            launch_date_original, moni_score, investors, launchpad
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s::jsonb, %s::jsonb)
                    """, (
                        project.get('row_index'),
                        project_info.get('name'),
                        project_info.get('symbol'),
                        url,
                        project.get('type'),
                        project.get('initial_cap'),
                        project.get('ido_raise'),
                        launch_date,
                        launch_date_original,
                        project.get('moni_score'),
                        json.dumps(project.get('investors', [])),
                        json.dumps(project.get('launchpad', []))
                    ))

                    saved_count += 1
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {project_info.get('name')} ({project_info.get('symbol')})")

            conn.commit()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            conn.rollback()
        finally:
            cursor.close()
            conn.close()

        print(f"\nüìä –ò—Ç–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
        print(f"  ‚úÖ –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {saved_count}")
        print(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")

    def get_database_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î"""
        conn = self.get_db_connection()
        if not conn:
            return

        cursor = conn.cursor(cursor_factory=RealDictCursor)

        try:
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT * FROM get_upcoming_stats()")
            stats = cursor.fetchone()

            if stats:
                print(f"  üìà –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {stats['total_projects']}")
                print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_projects']}")
                print(f"  üìÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats['this_week']}")
                print(f"  üóìÔ∏è –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {stats['this_month']}")
                print(f"  üí∞ –° –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π: {stats['with_initial_cap']}")
                if stats['avg_moni_score']:
                    print(f"  ‚≠ê –°—Ä–µ–¥–Ω–∏–π Moni Score: {stats['avg_moni_score']}")

            # –ë–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
            cursor.execute("SELECT * FROM upcoming_soon LIMIT 5")
            upcoming = cursor.fetchall()

            if upcoming:
                print(f"\nüöÄ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø—É—Å–∫–∏:")
                for project in upcoming:
                    days = project['days_until_launch']
                    print(f"  ‚Ä¢ {project['project_name']} ({project['project_symbol']}) - —á–µ—Ä–µ–∑ {days:.0f} –¥–Ω–µ–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            cursor.close()
            conn.close()

    def save_results(self, data, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'cryptorank_upcoming_{timestamp}.json'

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            print(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
            return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–ê–†–°–ï–† UPCOMING ICO –ü–†–û–ï–ö–¢–û–í")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É: cryptorank_upcoming")
    print("=" * 50)

    parser = CryptoRankUpcomingParser()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    result = parser.parse_table()

    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        parser.save_to_database(result['projects'])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        parser.get_database_stats()

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        # parser.save_results(result)

        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {result.get('total_projects', 0)}")
        print(f"üéØ –¢–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ (–±–µ–∑ TBA)")
    else:
        print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")

    print("=" * 50)
