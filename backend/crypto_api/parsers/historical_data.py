#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import json
import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î (–¥–ª—è —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç)
DB_CONFIG = {
    'host': os.environ.get('DB_HOST', 'localhost'),
    'port': os.environ.get('DB_PORT', '5432'),
    'database': os.environ.get('DB_NAME', 'crypto_db'),
    'user': os.environ.get('DB_USER', 'crypto_user'),
    'password': os.environ.get('DB_PASSWORD', 'crypto_password')
}

def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    print("üîß –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
    options = webdriver.ChromeOptions()
    options.add_argument('--headless=new')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-images')
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
    options.add_argument('--window-size=1920,1080')
    # –£–∫–∞–∑—ã–≤–∞–µ–º Selenium Manager –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à –≤ /app
    options.add_argument(f'--cache-dir={os.environ.get("WEBDRIVER_CACHE_DIR", "/app/.cache/selenium")}')
    driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(10)
    print("   ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
    return driver

def convert_date_format(date_text):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ '11 Aug' –∏–ª–∏ 'Aug 11' –≤ 'YYYY-MM-DD'"""
    if not date_text or date_text == 'TBA':
        return None
    try:
        months = {
            'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',
            'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08',
            'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'
        }
        parts = date_text.strip().split()
        if len(parts) < 2:
            return None
        day, month_text = None, None
        for p in parts:
            if p.isdigit():
                day = p.zfill(2)
            elif p[:3] in months:
                month_text = p[:3]
        if day and month_text:
            return f"2025-{months[month_text]}-{day}"
        return None
    except:
        return None

def clean_value(value):
    """–û—á–∏—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not value:
        return None
    value = value.strip()
    if value in ['-', '‚Äî', 'N/A', '', 'TBA']:
        return None
    return value

def get_coins_from_db():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏–∑ –ë–î"""
    try:
        import psycopg2
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT DISTINCT project_symbol, project_url 
            FROM cryptorank_upcoming 
            WHERE project_symbol IS NOT NULL 
              AND project_url LIKE '%/ico/%'
            ORDER BY project_symbol
        """)
        rows = cursor.fetchall()
        conn.close()
        coins = []
        for symbol, url in rows:
            slug = url.split('/ico/')[-1].split('?')[0]
            hist_url = f"https://cryptorank.io/ru/price/{slug}/historical-data"
            coins.append((symbol, hist_url))
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç –≤ –ë–î: {len(coins)}")
        return coins
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return []

def parse_historical_data(driver, symbol, base_url):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üîç –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é: {symbol}")
    print(f"üåê URL: {base_url}")

    try:
        driver.set_page_load_timeout(30)
        driver.get(base_url)
        time.sleep(3)

        # === –ñ–¥—ë–º –¢–ê–ë–õ–ò–¶–£ ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ===
        try:
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.TAG_NAME, "table"))
            )
            print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ ‚Üí —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except:
            print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—ã ‚Üí –≤–æ–∑–º–æ–∂–Ω–æ, –º–æ–Ω–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return []

        # === –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É ===
        table = driver.find_element(By.TAG_NAME, "table")
        rows = table.find_elements(By.TAG_NAME, "tr")[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if len(rows) == 0:
            print("   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")
            return []

        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}")

        parsed_data = []
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
        headers = [
            "Date", "Open", "High", "Low", "Med", "Close",
            "Change", "Volume", "Change Volume", "Market Cap"
        ]

        for row in rows:
            try:
                cells = row.find_elements(By.TAG_NAME, "td")
                if len(cells) < 6:  # –º–∏–Ω–∏–º—É–º Date –∏ Close
                    continue

                row_data = {}
                for i, header in enumerate(headers):
                    if i < len(cells):
                        cell_text = clean_value(cells[i].text)
                        row_data[header] = cell_text

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                raw_date = row_data.get("Date")
                date = convert_date_format(raw_date)
                if not date:
                    print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{raw_date}'")
                    continue

                row_data["Date"] = date
                parsed_data.append(row_data)

                # –õ–æ–≥–∏—Ä—É–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if len(parsed_data) == 1:
                    print(f"   ‚úÖ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {row_data}")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
                continue

        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(parsed_data)}")
        return parsed_data

    except Exception as e:
        error_msg = str(e).lower()
        if "timeout" in error_msg:
            print(f"   ‚è≥ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        elif "404" in error_msg or "not found" in error_msg:
            print(f"   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)")
        else:
            print(f"   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

def save_to_json(data, filename=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    if not data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return None

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = filename or f"historical_data_{timestamp}.json"

    result = {
        "scraped_at": datetime.now().isoformat(),
        "total_records": sum(len(d['data']) for d in data),
        "projects_count": len(data),
        "data": data
    }

    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        return filename
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –∏–∑ –ë–î"""
    driver = None
    all_data = []
    try:
        coins = get_coins_from_db()
        if not coins:
            print("‚ùå –ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return

        for i, (symbol, url) in enumerate(coins):
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –∫–∞–∂–¥—ã–µ 10 –º–æ–Ω–µ—Ç
            if i % 10 == 0 and driver:
                driver.quit()
                time.sleep(2)
                driver = setup_driver()

            if not driver:
                driver = setup_driver()

            print(f"\nüîÑ [{i+1}/{len(coins)}] –ü–∞—Ä—Å–∏–º: {symbol}")
            data = parse_historical_data(driver, symbol, url)

            if data:
                all_data.append({
                    "symbol": symbol,
                    "url": url,
                    "data": data
                })
            else:
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {symbol} (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")

            time.sleep(3)  # –ê–Ω—Ç–∏–±–∞–Ω

        if all_data:
            save_to_json(all_data)
        else:
            print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if driver:
            driver.quit()
        print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    main()