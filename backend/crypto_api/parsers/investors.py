#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import json
import time
import os
import psycopg2
from psycopg2.extras import Json  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Json –∞–¥–∞–ø—Ç–µ—Ä
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, StaleElementReferenceException
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv

    load_dotenv()
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑ .env —Ñ–∞–π–ª–∞
DB_CONFIG = {
    'host': os.environ.get('DB_HOST', 'localhost'),
    'port': os.environ.get('DB_PORT', '5432'),
    'database': os.environ.get('DB_NAME', 'crypto_db'),
    'user': os.environ.get('DB_USER', 'crypto_user'),
    'password': os.environ.get('DB_PASSWORD', 'crypto_password')
}


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î ---
def update_project_investors_in_db(project_id, investors_list):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'investors' –≤ —Ç–∞–±–ª–∏—Ü–µ 'cryptorank_upcoming' –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ project_id.

    :param project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ë–î.
    :param investors_list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞—Ö.
    """
    connection = None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        connection = psycopg2.connect(**DB_CONFIG)
        cursor = connection.cursor()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        # psycopg2.extras.Json –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç Python –≤ JSON –¥–ª—è PostgreSQL
        if not investors_list:
            investors_data = Json([])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
        else:
            # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
            investors_data = Json(investors_list)

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_query = """
            UPDATE cryptorank_upcoming 
            SET investors = %s 
            WHERE id = %s;
        """

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        cursor.execute(update_query, (investors_data, project_id))

        # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        connection.commit()

        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞—Ö –¥–ª—è project_id={project_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î.")

    except psycopg2.Error as db_err:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –¥–ª—è project_id={project_id}: {db_err}")
        if connection:
            connection.rollback()  # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    except Exception as e:
        print(f"   ‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –¥–ª—è project_id={project_id}: {e}")
        if connection:
            connection.rollback()
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if connection:
            cursor.close()
            connection.close()
            print("   üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")


# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---

def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    print("üîß –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
    options = webdriver.ChromeOptions()
    # options.add_argument('--headless=new') # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
    options.add_argument('--window-size=1920,1080')
    driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(5)  # –£–º–µ–Ω—å—à–µ–Ω–æ
    print("   ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
    return driver


def get_projects_from_db(limit=20):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –ë–î"""
    try:
        connection = psycopg2.connect(**DB_CONFIG)
        cursor = connection.cursor()
        query = """
        SELECT id, project_name, project_symbol, project_url 
        FROM cryptorank_upcoming 
        WHERE project_url IS NOT NULL 
        AND project_url != ''
        ORDER BY id 
        LIMIT %s
        """
        cursor.execute(query, (limit,))
        projects = cursor.fetchall()
        connection.close()
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î: {len(projects)}")
        return [{'id': row[0], 'name': row[1], 'symbol': row[2], 'url': row[3].strip()} for row in projects if
                row[3].strip()]
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        return [
            {
                'id': 10,
                'name': 'TheoriqAI',
                'symbol': 'THQ',
                'url': 'https://cryptorank.io/ico/theoriqai'
            },
            {
                'id': 1,
                'name': 'OneFootball',
                'symbol': 'OFC',
                'url': 'https://cryptorank.io/ico/onefootballcom'
            }
            # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        ]


def find_investors_table(driver):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.
    –û–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'Investors and Backers' –∏ —Å–ª–µ–¥—É—é—â—É—é –∑–∞ –Ω–∏–º —Ç–∞–±–ª–∏—Ü—É.
    """
    try:
        # –ù–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((
                By.XPATH,
                "//h2[contains(text(), 'Investors and Backers') or contains(text(), 'Investors & Backers')]"
            ))
        )
        print(f"   üìç –ó–∞–≥–æ–ª–æ–≤–æ–∫ 'Investors and Backers' –Ω–∞–π–¥–µ–Ω: '{header.text.strip()}'")
        # –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        table = header.find_element(By.XPATH, "./following::table[1]")
        if table:
            print(f"   üìä –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–∞.")
            return table
        else:
            print("   ‚ùå –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞.")
            return None
    except TimeoutException:
        print("   ‚è≥ –¢–∞–π–º–∞—É—Ç: –ó–∞–≥–æ–ª–æ–≤–æ–∫ 'Investors and Backers' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {e}")
        return None


def get_page_content_hash(table):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏."""
    try:
        rows = table.find_elements(By.XPATH, ".//tbody/tr")
        page_text_parts = []
        for row in rows:
            cells = row.find_elements(By.XPATH, "./td")
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —è—á–µ–µ–∫ –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            # Name (0), Tier (1), Type (2), Stage (3)
            name_text = cells[0].text.strip() if len(cells) > 0 else ""
            tier_text = cells[1].text.strip() if len(cells) > 1 else ""
            type_text = cells[2].text.strip() if len(cells) > 2 else ""
            stage_text = cells[3].text.strip() if len(cells) > 3 else ""
            row_text = f"{name_text}|{tier_text}|{type_text}|{stage_text}"
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –Ω–µ –ø—Ä–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞–≥–∏–Ω–∞—Ü–∏—è)
            if row_text and not (name_text.isdigit() and len(name_text) < 3 and not tier_text):
                page_text_parts.append(row_text)
        content = " || ".join(sorted(page_text_parts))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        # print(f"DEBUG: Hashing content: {content}") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return hash(content)
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None


def collect_investors_from_table(table, project_info):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
    investors = []
    try:
        rows = table.find_elements(By.XPATH, ".//tbody/tr")
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")
        for i, row in enumerate(rows):
            try:
                cells = row.find_elements(By.XPATH, "./td")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ (Name, Tier, Type)
                if len(cells) < 3:
                    print(f"   ‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {i + 1} –∏–º–µ–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—á–µ–µ–∫ ({len(cells)}), –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                    continue
                # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —è—á–µ–π–∫–∞–º ---
                # Name (–ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞, –∏–Ω–¥–µ–∫—Å 0)
                name_cell = cells[0]
                full_text = name_cell.text.strip()
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏: –Ω–µ –ø—É—Å—Ç–æ–µ, –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–µ –ø—Ä–æ—á–µ—Ä–∫
                if not full_text or (full_text.isdigit() and len(full_text) < 3) or full_text in ["-", ""]:
                    print(f"   ‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i + 1}: '{full_text}', –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                    continue
                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ä–æ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, "Lead" –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
                parts = full_text.split('\n')  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: \n –≤–º–µ—Å—Ç–æ '
                investor_name = parts[0].strip()
                investor_role = parts[1].strip() if len(parts) > 1 else ""
                # Tier (–≤—Ç–æ—Ä–∞—è —è—á–µ–π–∫–∞, –∏–Ω–¥–µ–∫—Å 1)
                investor_tier = cells[1].text.strip() if len(cells) > 1 else ""
                # Type (—Ç—Ä–µ—Ç—å—è —è—á–µ–π–∫–∞, –∏–Ω–¥–µ–∫—Å 2)
                investor_type = cells[2].text.strip() if len(cells) > 2 else ""
                # Stage (—á–µ—Ç–≤–µ—Ä—Ç–∞—è —è—á–µ–π–∫–∞, –∏–Ω–¥–µ–∫—Å 3, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                investor_stage = cells[3].text.strip() if len(cells) > 3 else ""
                # Href (—Å—Å—ã–ª–∫–∞ –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏ –∏–º–µ–Ω–∏)
                investor_href = ""
                try:
                    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏ —Å –∏–º–µ–Ω–µ–º
                    link_element = name_cell.find_element(By.XPATH, ".//a[@href]")
                    href = link_element.get_attribute('href')
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ —Ñ–æ–Ω–¥/–∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
                    if href and ('/funds/' in href or '/investors/' in href or '/companies/' in href):
                        investor_href = href

                except:
                    pass  # –°—Å—ã–ª–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
                # -----------------------------
                investor = {
                    'project_id': project_info['id'],
                    'project_name': project_info['name'],
                    'project_url': project_info['url'],
                    'investor_name': investor_name,
                    'investor_role': investor_role,
                    'investor_tier': investor_tier,
                    'investor_type': investor_type,
                    'investor_stage': investor_stage,
                    'investor_href': investor_href
                }
                investors.append(investor)
                # print(f"      üë• {investor_name} ({investor_role}) - Tier: {investor_tier}, Type: {investor_type}") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i + 1}: {e}")
                # import traceback
                # traceback.print_exc() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
                continue

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        # import traceback
        # traceback.print_exc() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏

    print(f"   ‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(investors)} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    return investors


def find_next_page_button(table):
    """
    –ò—â–µ—Ç –∫–Ω–æ–ø–∫—É "Next" –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ CryptoRank.
    """
    try:
        # --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
        pagination_container = None
        # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç, —Å–ª–µ–¥—É—é—â–∏–π –ü–û–°–õ–ï —Ç–∞–±–ª–∏—Ü—ã
        try:
            elements_after_table = table.find_elements(By.XPATH, "./following::*")
            for elem in elements_after_table:
                elem_classes = (elem.get_attribute('class') or '').lower()
                if 'pagination' in elem_classes or 'sc-' in elem_classes or \
                        elem.find_elements(By.XPATH, ".//button[@aria-label='Next page']") or \
                        elem.find_elements(By.XPATH, ".//button[contains(@class, 'styles_button__')]"):
                    pagination_container = elem
                    print(
                        f"   üì¶ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã (tag: {elem.tag_name}, class: {elem.get_attribute('class')}).")
                    break
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
                if len(elements_after_table) > 20:
                    break
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ following::*: {e}")
        if not pagination_container:
            try:
                pagination_container = table.find_element(By.XPATH, "./following-sibling::*[1]")
                print(f"   üì¶ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞–∫ —Å–ª–µ–¥—É—é—â–∏–π sibling (tag: {pagination_container.tag_name}).")
            except:
                pass
        if not pagination_container:
            try:
                parent = table.find_element(By.XPATH, "..")
                pagination_containers = parent.find_elements(By.XPATH,
                                                             "./*[contains(@class, 'pagination') or contains(@class, 'styles_pagination') or contains(@class, 'sc-')]")
                if pagination_containers:
                    pagination_container = pagination_containers[0]
                    print(f"   üì¶ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è (tag: {pagination_container.tag_name}).")
            except Exception as e_inner:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è: {e_inner}")
        if not pagination_container:
            print("   ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä—è–¥–æ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π.")
            return None
        # --- –ü–æ–∏—Å–∫ —Å–∞–º–æ–π –∫–Ω–æ–ø–∫–∏ "Next" –≤–Ω—É—Ç—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ---
        # 1. –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Next page" –ø–æ aria-label (–°–ê–ú–´–ô –ù–ê–î–ï–ñ–ù–´–ô –°–ü–û–°–û–ë)
        try:
            next_button = pagination_container.find_element(By.XPATH,
                                                            ".//button[@aria-label='Next page' and not(@disabled)]")
            if next_button.is_displayed() and next_button.is_enabled():
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Next –ø–æ aria-label")
                return next_button
        except:
            pass
        # 2. –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å SVG —Å—Ç—Ä–µ–ª–∫–æ–π –≤–ø—Ä–∞–≤–æ
        try:
            svg_next_buttons = pagination_container.find_elements(By.XPATH,
                                                                  ".//button[not(@disabled)]//svg//path[contains(@d, 'M6.994 5.002') or contains(@d, 'm8.002') or contains(@d, 'M8.002')]")
            for svg_path in svg_next_buttons:
                try:
                    button = svg_path.find_element(By.XPATH, "./ancestor::button[1]")
                    if button.is_displayed() and button.is_enabled() and not button.get_attribute('disabled'):
                        print(f"   üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Next –ø–æ SVG (—Å—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ)")
                        return button
                except:
                    continue
        except Exception as e_svg:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ Next –ø–æ SVG: {e_svg}")
        # 3. –ò—â–µ–º —á–∏—Å–ª–æ–≤—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        try:
            page_buttons = pagination_container.find_elements(By.XPATH,
                                                              ".//button[contains(@class, 'styles_button__') and .//span[contains(@class, 'styles_text__') and text()[normalize-space(.) != '']]]")
            current_page = None
            max_page = 0
            page_elements = {}
            for button in page_buttons:
                try:
                    if not button.is_displayed() or not button.is_enabled() or button.get_attribute('disabled'):
                        continue
                    span = button.find_element(By.XPATH, ".//span[contains(@class, 'styles_text__')]")
                    text = span.text.strip()
                    if text.isdigit():
                        page_num = int(text)
                        page_elements[page_num] = button
                        max_page = max(max_page, page_num)
                        classes = button.get_attribute('class') or ''
                        if 'styles_selected__' in classes:
                            current_page = page_num
                            print(f"   üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_num}")
                except Exception as e_btn:
                    continue
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if current_page is not None:
                # –ò –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–π
                if current_page < max_page:
                    next_page = current_page + 1
                    if next_page in page_elements:
                        print(f"   ‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {next_page} (–ø–æ —á–∏—Å–ª–æ–≤–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)")
                        return page_elements[next_page]
                else:
                    # –ï—Å–ª–∏ current_page == max_page, –∑–Ω–∞—á–∏—Ç, –º—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    print(f"   ‚èπÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ({current_page}).")
                    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            else:
                # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
                # –ò –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–µ–µ
                # –≠—Ç–æ –ª–æ–≥–∏–∫–∞ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                if page_elements and 2 in page_elements:
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ 1 —Ç–µ–∫—É—â–µ–π (–≤—ã–±—Ä–∞–Ω–Ω–æ–π)
                    page_1_button = page_elements.get(1)
                    if page_1_button:
                        classes_1 = page_1_button.get_attribute('class') or ''
                        if 'styles_selected__' in classes_1:
                            print(f"   ‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)")
                            return page_elements[2]
                    # –ï—Å–ª–∏ 1 –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –ª–æ–≥–∏–∫–∞ –¥—Ä—É–≥–∞—è.
                    # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –Ω–µ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                    print(f"   ‚ö†Ô∏è –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2 –Ω–∞–π–¥–µ–Ω–∞. –û–∂–∏–¥–∞–µ–º —è–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ 'Next'.")
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
            print(f"   ‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ 'Next' –ø–æ —á–∏—Å–ª–æ–≤–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e_num:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–æ–≤–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e_num}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")

    print("   ‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ 'Next' –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    return None  # –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ –∫–æ–Ω—Ü–µ


def process_investors_with_pagination(driver, project_info):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤."""
    all_investors = []
    current_page = 1
    max_pages = 15  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
    seen_hashes = set()
    table = find_investors_table(driver)
    if not table:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏.")
        return all_investors
    while current_page <= max_pages:
        print(f"\n   üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page}...")
        page_hash = get_page_content_hash(table)
        if page_hash is not None:
            if page_hash in seen_hashes:
                print(f"   ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page} —É–∂–µ –±—ã–ª (—Ö—ç—à —Å–æ–≤–ø–∞–¥–∞–µ—Ç). –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                break
            else:
                seen_hashes.add(page_hash)
        else:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö—ç—à –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page}")
        investors = collect_investors_from_table(table, project_info)
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è: –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
        if not investors and current_page > 1:
            print(f"   ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –ø—É—Å—Ç–∞. –ö–æ–Ω–µ—Ü.")
            break
        all_investors.extend(investors)
        print(f"   üìà –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {len(all_investors)}")
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if current_page == 1:
            next_button = find_next_page_button(table)
            if not next_button:
                print(f"   üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.")
                break
            else:
                print(f"   üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è.")
        # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "Next"
        next_button = find_next_page_button(table)
        if not next_button:
            print(f"   ‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ 'Next' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            break
        if not next_button.is_displayed() or not next_button.is_enabled():
            print(f"   ‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ 'Next' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            break
        print(f"   üîΩ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ 'Next'...")
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_button)
        time.sleep(1.5)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –Ω–µ–º–Ω–æ–≥–æ
        print(f"   üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ 'Next'...")
        try:
            driver.execute_script("arguments[0].click();", next_button)
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")
            break
        print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        time.sleep(2.5)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –Ω–µ–º–Ω–æ–≥–æ
        # –ù–∞–¥–µ–∂–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        try:
            # –ñ–¥–µ–º, –ø–æ–∫–∞ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–Ω–µ—Ç stale
            WebDriverWait(driver, 15).until(EC.staleness_of(table))
            print(f"   ‚úÖ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É—Å—Ç–∞—Ä–µ–ª–∞.")
        except TimeoutException:
            print(f"   ‚ö†Ô∏è –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...")
            # –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞, –ø—Ä–æ–≤–µ—Ä–∏–º —Ö—ç—à
            new_table = find_investors_table(driver)
            if new_table:
                new_hash = get_page_content_hash(new_table)
                if new_hash == page_hash:
                    print(f"   ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                    break
                else:
                    table = new_table
            else:
                print(f"   ‚ùå –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                break
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏ –∏—â–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        print(f"   üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
        new_table = find_investors_table(driver)
        if not new_table:
            print(f"   ‚ùå –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            break
        table = new_table
        current_page += 1
        print("-" * 40)
    return all_investors


def scan_project_investors(driver, project_info):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."""
    try:
        print(f"\nüîç –°–ë–û–† –ò–ù–í–ï–°–¢–û–†–û–í: {project_info['name']} ({project_info['symbol']})")
        print(f"üåê URL: {project_info['url']}")
        driver.set_page_load_timeout(90)  # –£–≤–µ–ª–∏—á–µ–Ω–æ
        driver.get(project_info['url'])
        print("   ‚è≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ...")
        time.sleep(6)  # –£–≤–µ–ª–∏—á–µ–Ω–æ
        # –ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight/3);")
        time.sleep(2)
        driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(1)
        investors = process_investors_with_pagination(driver, project_info)
        print(f"\n   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {len(investors)}")
        if investors:
            print(f"   üìã –ü—Ä–∏–º–µ—Ä—ã (–ø–µ—Ä–≤—ã–µ 5):")
            for inv in investors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                role_str = f" ({inv['investor_role']})" if inv['investor_role'] else ""
                tier_str = f", Tier: {inv['investor_tier']}"
                type_str = f", Type: {inv['investor_type']}"
                stage_str = f", Stage: {inv['investor_stage']}" if inv['investor_stage'] else ""
                print(f"      üë• {inv['investor_name']}{role_str}{tier_str}{type_str}{stage_str}")
            if len(investors) > 5:
                print(f"      ... –∏ –µ—â–µ {len(investors) - 5} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.")
        else:
            print("   ‚ÑπÔ∏è –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return investors
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {project_info['name']}: {e}")
        import traceback
        traceback.print_exc()
        return []


def remove_duplicates(investors):
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤."""
    print(f"\nüîß –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    print(f"üìä –î–æ: {len(investors)} –∑–∞–ø–∏—Å–µ–π")
    seen = set()
    unique = []
    for inv in investors:
        key = (
            inv['project_id'],
            inv['investor_name'].lower().strip(),
            inv.get('investor_href', '').strip()
        )
        if key not in seen:
            seen.add(key)
            unique.append(inv)
    print(f"‚úÖ –ü–æ—Å–ª–µ: {len(unique)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    return unique


def save_to_json(investors):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª."""
    if not investors:
        print("\n‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return None
    try:
        unique_investors = remove_duplicates(investors)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        data = {
            "scan_info": {
                "timestamp": datetime.now().isoformat(),
                "total_found": len(investors),
                "unique_investors": len(unique_investors),
                "duplicates_removed": len(investors) - len(unique_investors),
                "projects_scanned": len(set(inv['project_name'] for inv in unique_investors))
            },
            "investors": unique_investors
        }
        filename = f"investors_{timestamp}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        print(f"   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {len(unique_investors)}")
        return filename
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON: {e}")
        return None


def analyze_results(investors):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    if not investors:
        print("\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    unique_investors = remove_duplicates(investors)
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –°–û–ë–†–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    projects_data = {}
    investor_names = {}
    investor_types = {}
    investor_tiers = {}
    for inv in unique_investors:
        pname = inv['project_name']
        iname = inv['investor_name']
        itype = inv['investor_type']
        itier = inv['investor_tier']
        if pname not in projects_data:
            projects_data[pname] = {'count': 0, 'investors': []}
        projects_data[pname]['count'] += 1
        projects_data[pname]['investors'].append(inv)
        investor_names[iname] = investor_names.get(iname, 0) + 1
        if itype:
            investor_types[itype] = investor_types.get(itype, 0) + 1
        if itier:
            investor_tiers[itier] = investor_tiers.get(itier, 0) + 1
    print(f"üéØ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects_data)}")
    print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {len(investor_names)}")
    print(f"üè∑Ô∏è  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: {len(investor_types)}")
    print(f"üèÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (Tier): {len(investor_tiers)}")
    print(f"\nüèÖ –¢–û–ü-10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤:")
    top_investors = sorted(investor_names.items(), key=lambda item: item[1], reverse=True)[:10]
    for i, (name, count) in enumerate(top_investors, 1):
        print(f"   {i:2d}. {name:<30} ({count} –ø—Ä–æ–µ–∫—Ç–æ–≤)")
    if investor_types:
        print(f"\nüè∑Ô∏è  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
        sorted_types = sorted(investor_types.items(), key=lambda item: item[1], reverse=True)
        for type_name, count in sorted_types:
            print(f"   - {type_name:<20} ({count})")
    if investor_tiers:
        print(f"\nüéñÔ∏è  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º (Tier):")
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        sorted_tiers = sorted(investor_tiers.items(),
                              key=lambda item: (item[0].isdigit(), int(item[0]) if item[0].isdigit() else item[0]))
        for tier, count in sorted_tiers:
            print(f"   - Tier {tier:<18} ({count})")
    print(f"\nüóÇÔ∏è  –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ü–†–û–ï–ö–¢–ê–ú:")
    for pname, pdata in projects_data.items():
        print(f"\n   üéØ {pname} ({pdata['count']} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤):")
        for inv in pdata['investors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
            role_str = f" ({inv['investor_role']})" if inv['investor_role'] else ""
            tier_str = f", Tier: {inv['investor_tier']}"
            type_str = f", Type: {inv['investor_type']}"
            stage_str = f", Stage: {inv['investor_stage']}" if inv['investor_stage'] else ""
            print(f"      üë• {inv['investor_name']}{role_str}{tier_str}{type_str}{stage_str}")
        if len(pdata['investors']) > 3:
            print(f"      ... –∏ –µ—â–µ {len(pdata['investors']) - 3} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    driver = setup_driver()
    all_investors = []
    try:
        print("üöÄ –°–¢–ê–†–¢ –ü–ê–†–°–ò–ù–ì–ê –ò–ù–í–ï–°–¢–û–†–û–í CRYPTORANK")
        print("=" * 50)
        projects = get_projects_from_db(20)
        if not projects:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
            return
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(projects)}")
        for i, project in enumerate(projects, 1):
            print(f"\n{'=' * 20} –ü–†–û–ï–ö–¢ {i}/{len(projects)} {'=' * 20}")
            project_investors = scan_project_investors(driver, project)
            # --- –ù–û–í–ê–Ø –°–¢–†–û–ß–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ---
            if project_investors is not None:  # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (–ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ç)
                update_project_investors_in_db(project['id'], project_investors)
            # ------------------------------------------------------------------
            all_investors.extend(project_investors)
            if i < len(projects):
                print(f"\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(3)
        if all_investors:
            print(f"\n{'=' * 20} –ò–¢–û–ì–ò {'=' * 20}")
            analyze_results(all_investors)
            save_to_json(all_investors)
        else:
            print("\nüòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        driver.quit()
        print("\nüîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")
