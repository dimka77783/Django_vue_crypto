#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import time
import os
import psycopg2
from selenium import webdriver
from selenium.webdriver.common.by import By
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv

    load_dotenv()
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑ .env —Ñ–∞–π–ª–∞
DB_CONFIG = {
    'host': os.environ.get('DB_HOST', 'localhost'),
    'port': os.environ.get('DB_PORT', '5432'),
    'database': os.environ.get('DB_NAME', 'crypto_db'),
    'user': os.environ.get('DB_USER', 'crypto_user'),
    'password': os.environ.get('DB_PASSWORD', 'crypto_password')
}


def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    print("üîß –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
    options = webdriver.ChromeOptions()
    options.add_argument('--headless=new')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
    options.add_argument('--window-size=1920,1080')

    driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(8)
    print("   ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
    return driver


def get_projects_from_db(limit=10):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –ë–î"""
    try:
        connection = psycopg2.connect(**DB_CONFIG)
        cursor = connection.cursor()

        query = """
        SELECT id, project_name, project_symbol, project_url 
        FROM cryptorank_upcoming 
        WHERE project_url IS NOT NULL 
        AND project_url != ''
        ORDER BY id 
        LIMIT %s
        """

        cursor.execute(query, (limit,))
        projects = cursor.fetchall()
        connection.close()

        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î: {len(projects)}")
        return [{'id': row[0], 'name': row[1], 'symbol': row[2], 'url': row[3]} for row in projects]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return []


def find_platforms_on_project_page(driver, project):
    """–ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    platforms_found = []
    attempt = 0
    max_wait_time = 300  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 5 –º–∏–Ω—É—Ç

    while True:
        attempt += 1
        try:
            print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {project['name']} ({project['symbol']}) - –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
            print(f"üåê URL: {project['url']}")

            # –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            driver.set_page_load_timeout(60)  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            driver.get(project['url'])
            time.sleep(5)

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)
            driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(2)

            # ============ –ü–û–ò–°–ö "TRENDING TOKEN SALES" ============
            trending_elements = driver.find_elements(By.XPATH,
                                                     "//*[contains(text(), 'Trending Token Sales') and not(self::script) and not(ancestor::script)]")

            visible_trending_elements = []
            for element in trending_elements:
                try:
                    if element.is_displayed() and element.size['width'] > 0 and element.size['height'] > 0:
                        visible_trending_elements.append(element)
                except:
                    continue

            trending_y_position = None
            if visible_trending_elements:
                positions = [elem.location['y'] for elem in visible_trending_elements if elem.location['y'] > 100]
                if positions:
                    trending_y_position = max(positions)
                    print(f"   üéØ 'Trending Token Sales' –Ω–∞–π–¥–µ–Ω –Ω–∞ Y={trending_y_position}")

            # ============ –ü–û–ò–°–ö FUNDRAISING –°–°–´–õ–û–ö ============
            fundraising_links = driver.find_elements(By.XPATH, "//a[contains(@href, '/fundraising-platforms/')]")
            print(f"   üí∞ –ù–∞–π–¥–µ–Ω–æ fundraising —Å—Å—ã–ª–æ–∫: {len(fundraising_links)}")

            for link in fundraising_links:
                try:
                    position = link.location
                    text = link.text.strip()
                    href = link.get_attribute('href')
                    title = link.get_attribute('title') or ''

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ URL
                    platform_name = ""
                    if '/fundraising-platforms/' in href:
                        platform_name = href.split('/fundraising-platforms/')[-1]
                        platform_name = platform_name.replace('-', ' ').title()

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Trending Token Sales
                    position_status = "unknown"
                    if trending_y_position:
                        if position['y'] < trending_y_position:
                            position_status = "above"
                        else:
                            position_status = "below"

                    platform_info = {
                        'project_id': project['id'],
                        'project_name': project['name'],
                        'project_url': project['url'],
                        'platform_name': platform_name,
                        'platform_text': text,
                        'platform_title': title,
                        'platform_href': href,
                        'position_x': position['x'],
                        'position_y': position['y'],
                        'position_status': position_status,
                        'trending_position': trending_y_position
                    }

                    platforms_found.append(platform_info)

                    status_emoji = "‚úÖ" if position_status == "above" else "üö´" if position_status == "below" else "‚ùì"
                    print(f"      {status_emoji} {platform_name} | {text} | Y={position['y']}")

                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")

            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–æ–µ–∫—Ç {project['name']}")
            return platforms_found

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt}: {e}")

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –º–∞–∫—Å–∏–º—É–º–æ–º)
            wait_time = min(attempt * 10, max_wait_time)  # 10, 20, 30, ..., –¥–æ 300 —Å–µ–∫—É–Ω–¥
            print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 1}...")
            time.sleep(wait_time)

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
            if any(keyword in str(e).lower() for keyword in ['timeout', 'connection', 'refused', 'reset']):
                print(f"   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º...")
                try:
                    driver.quit()
                    time.sleep(5)
                    driver = setup_driver()
                except Exception as restart_error:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {restart_error}")
                    time.sleep(10)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
                    try:
                        driver = setup_driver()
                    except:
                        print(f"   üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä, –ø–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥...")
                        time.sleep(30)
                        driver = setup_driver()

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ø—ã—Ç–æ–∫
            if attempt % 10 == 0:
                print(f"   üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {wait_time}—Å")


def remove_duplicates(platforms):
    """–£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    print(f"\nüîß –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í:")
    print("-" * 30)
    print(f"üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(platforms)}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    seen = set()
    unique_platforms = []

    for platform in platforms:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        key = (
            platform['project_id'],
            platform['platform_name'].lower().strip(),
            platform['platform_href']
        )

        if key not in seen:
            seen.add(key)
            unique_platforms.append(platform)

    duplicates_removed = len(platforms) - len(unique_platforms)
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_removed}")
    print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(unique_platforms)}")

    return unique_platforms


def update_launchpads_in_db(platforms):
    """–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ launchpad –≤ —Ç–∞–±–ª–∏—Ü–µ cryptorank_upcoming"""
    print(f"\nüíæ –û–ë–ù–û–í–õ–ï–ù–ò–ï LAUNCHPAD –í –ë–î (–¢–û–õ–¨–ö–û –í–ê–õ–ò–î–ù–´–ï –ü–õ–ê–¢–§–û–†–ú–´):")
    print("-" * 60)

    try:
        connection = psycopg2.connect(**DB_CONFIG)
        cursor = connection.cursor()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–≤—ã—à–µ Trending Token Sales) –ø–æ project_id
        platforms_by_project = {}
        for platform in platforms:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "above" (‚úÖ)
            if platform['position_status'] != 'above':
                continue

            project_id = platform['project_id']
            platform_name = platform['platform_name']

            if project_id not in platforms_by_project:
                platforms_by_project[project_id] = set()

            if platform_name and platform_name.strip():
                platforms_by_project[project_id].add(platform_name.strip())

        updated_count = 0

        for project_id, platform_names in platforms_by_project.items():
            if not platform_names:
                continue

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ launchpad –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            cursor.execute("SELECT launchpad FROM cryptorank_upcoming WHERE id = %s", (project_id,))
            result = cursor.fetchone()

            if result:
                current_launchpad = result[0]

                # –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ JSON
                existing_platforms = set()
                if current_launchpad:
                    try:
                        if isinstance(current_launchpad, str):
                            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON
                            existing_data = json.loads(current_launchpad)
                        else:
                            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç Python
                            existing_data = current_launchpad

                        if isinstance(existing_data, list):
                            existing_platforms = set(existing_data)
                        elif isinstance(existing_data, str):
                            # –ï—Å–ª–∏ –≤ JSON –ª–µ–∂–∏—Ç —Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                            existing_platforms = set(p.strip() for p in existing_data.split(',') if p.strip())
                    except (json.JSONDecodeError, TypeError):
                        # –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        if isinstance(current_launchpad, str):
                            existing_platforms = set(p.strip() for p in current_launchpad.split(',') if p.strip())

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ –í–ê–õ–ò–î–ù–´–ú–ò –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
                all_platforms = existing_platforms.union(platform_names)

                # –°–æ–∑–¥–∞–µ–º JSON –º–∞—Å—Å–∏–≤
                launchpad_json = json.dumps(sorted(list(all_platforms)), ensure_ascii=False)

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                current_platforms_set = existing_platforms
                new_platforms_set = all_platforms

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if current_platforms_set != new_platforms_set:
                    cursor.execute(
                        "UPDATE cryptorank_upcoming SET launchpad = %s WHERE id = %s",
                        (launchpad_json, project_id)
                    )
                    updated_count += 1

                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    cursor.execute("SELECT project_name FROM cryptorank_upcoming WHERE id = %s", (project_id,))
                    project_result = cursor.fetchone()
                    project_name = project_result[0] if project_result else f"ID_{project_id}"

                    platforms_str = ', '.join(sorted(list(all_platforms)))
                    print(f"   ‚úÖ {project_name}: {platforms_str}")

        connection.commit()
        connection.close()

        print(f"\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {updated_count}")
        print(f"üíæ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(platforms_by_project)}")
        print(f"üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–≤—ã—à–µ 'Trending Token Sales')")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        import traceback
        print(traceback.format_exc())


def save_platforms_to_json(platforms):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ JSON —Ñ–∞–π–ª"""
    try:
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        unique_platforms = remove_duplicates(platforms)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
        json_data = {
            "scan_info": {
                "timestamp": datetime.now().isoformat(),
                "total_platforms_found": len(platforms),
                "unique_platforms": len(unique_platforms),
                "duplicates_removed": len(platforms) - len(unique_platforms),
                "total_projects": len(set(p['project_name'] for p in unique_platforms))
            },
            "platforms": unique_platforms
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        filename = f"found_platforms_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(unique_platforms)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ —Ñ–∞–π–ª: {filename}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        update_launchpads_in_db(unique_platforms)

        return filename

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
        return None


def analyze_platforms(platforms):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –ù–ê–ô–î–ï–ù–ù–´–• –ü–õ–ê–¢–§–û–†–ú:")
    print("=" * 50)

    if not platforms:
        print("‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    unique_platforms = remove_duplicates(platforms)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    by_projects = {}
    for platform in unique_platforms:
        project_name = platform['project_name']
        if project_name not in by_projects:
            by_projects[project_name] = []
        by_projects[project_name].append(platform)

    print(f"üìà –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(by_projects)}")
    print(f"üí∞ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(unique_platforms)}")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    unique_platform_names = set()
    above_count = 0
    below_count = 0

    for platform in unique_platforms:
        unique_platform_names.add(platform['platform_name'])
        if platform['position_status'] == 'above':
            above_count += 1
        elif platform['position_status'] == 'below':
            below_count += 1

    print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(unique_platform_names)}")
    print(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º –≤—ã—à–µ 'Trending Token Sales': {above_count}")
    print(f"üö´ –ü–ª–∞—Ç—Ñ–æ—Ä–º –Ω–∏–∂–µ 'Trending Token Sales': {below_count}")

    # –¢–æ–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platform_counts = {}
    for platform in unique_platforms:
        name = platform['platform_name']
        platform_counts[name] = platform_counts.get(name, 0) + 1

    print(f"\nüèÜ –¢–û–ü-10 –°–ê–ú–´–• –ß–ê–°–¢–´–• –ü–õ–ê–¢–§–û–†–ú:")
    for i, (platform, count) in enumerate(sorted(platform_counts.items(), key=lambda x: x[1], reverse=True)[:10], 1):
        print(f"   {i:2d}. {platform:<20} - {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")

    # –î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –ü–†–û–ï–ö–¢–ê–ú:")
    for project_name, project_platforms in by_projects.items():
        print(f"\n   üéØ {project_name}:")
        for platform in project_platforms:
            status = "‚úÖ" if platform['position_status'] == 'above' else "üö´" if platform['position_status'] == 'below' else "‚ùì"
            print(f"      {status} {platform['platform_name']}")

    return unique_platforms


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    driver = setup_driver()
    all_platforms = []

    try:
        print("üîç –ü–û–ò–°–ö –ü–õ–ê–¢–§–û–†–ú –ù–ê –í–°–ï–• –°–¢–†–ê–ù–ò–¶–ê–• –ü–†–û–ï–ö–¢–û–í")
        print("=" * 60)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –ë–î
        projects = get_projects_from_db(limit=20)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not projects:
            print("‚ùå –ü—Ä–æ–µ–∫—Ç—ã –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for i, project in enumerate(projects, 1):
            print(f"\nüöÄ –ü—Ä–æ–µ–∫—Ç {i}/{len(projects)}:")

            platforms = find_platforms_on_project_page(driver, project)
            all_platforms.extend(platforms)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            time.sleep(3)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
        unique_platforms = analyze_platforms(all_platforms)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã)
        if all_platforms:
            json_filename = save_platforms_to_json(all_platforms)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    finally:
        driver.quit()
        print("\nüîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

