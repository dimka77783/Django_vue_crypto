# backend/crypto_api/views.py

from rest_framework import generics
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.http import HttpResponse
from django.db import connection

from .models import UpcomingCrypto
from .serializers import UpcomingCryptoSerializer
from .tasks import run_full_parsing_pipeline


# --- API: –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç ---
class CryptoListAPIView(generics.ListAPIView):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö upcoming-–ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    queryset = UpcomingCrypto.objects.all()
    serializer_class = UpcomingCryptoSerializer


# --- API: –î–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç—ã ---
class CryptoDetailAPIView(generics.RetrieveAPIView):
    queryset = UpcomingCrypto.objects.all()
    serializer_class = UpcomingCryptoSerializer
    lookup_field = 'id'

    def retrieve(self, request, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ cryptorank_upcoming
        instance = self.get_object()
        data = self.get_serializer(instance).data  # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω–æ–º–∏–∫—É –∏–∑ cryptorank_tokenomics
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT tokenomics FROM cryptorank_tokenomics WHERE project_name = %s",
                [instance.project_name]
            )
            row = cursor.fetchone()
            if row:
                data['tokenomics'] = row[0]  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–≤–µ—Ç
            else:
                data['tokenomics'] = None

        return Response(data)


# --- API: –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ (–≤—Å—è —Ç–∞–±–ª–∏—Ü–∞) ---
class TokenomicsDetailedView(generics.ListAPIView):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—å—é—à–∫–∏ tokenomics_detailed
    """
    def get_queryset(self):
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM tokenomics_detailed")
            columns = [col[0] for col in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def list(self, request, *args, **kwargs):
        return Response(self.get_queryset())


# --- API: OHLC (–∑–∞–≥–ª—É—à–∫–∞) ---
class OHLCDataView(generics.GenericAPIView):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OHLC-–¥–∞–Ω–Ω—ã–µ (–∑–∞–≥–ª—É—à–∫–∞)
    """
    def get(self, request, symbol):
        data = {
            "symbol": symbol,
            "data": [
                {"time": "2025-08-01", "open": 1.0, "high": 1.1, "low": 0.9, "close": 1.05},
                {"time": "2025-08-02", "open": 1.05, "high": 1.2, "low": 1.0, "close": 1.15},
            ]
        }
        return Response(data)


# --- API: –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
@api_view(['POST'])
def trigger_parsing(request):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Celery-–∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    task = run_full_parsing_pipeline.delay()
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {task.id}")
    return Response({
        "status": "success",
        "message": "Parsing started",
        "task_id": task.id
    })


# --- API: –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
def api_root(request):
    """
    –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ API
    """
    return HttpResponse("""
    <h1>üöÄ Crypto Backend API</h1>
    <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</p>
    <ul>
        <li><a href="/admin">–ê–¥–º–∏–Ω–∫–∞ Django</a></li>
        <li><a href="/api/coins/">–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç</a></li>
        <li><a href="/api/tokenomics-detailed/">–î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∏</a></li>
        <li><a href="/api/trigger-parsing/" target="_blank">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</a></li>
    </ul>
    """)