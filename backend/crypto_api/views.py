# backend/crypto_api/views.py

from rest_framework import generics
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.http import HttpResponse
from django.db import connection
from .models import UpcomingCrypto
from .serializers import UpcomingCryptoSerializer
from .tasks import run_full_parsing_pipeline


# --- API: –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç ---
class CryptoListAPIView(generics.ListAPIView):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö upcoming-–ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    queryset = UpcomingCrypto.objects.all()
    serializer_class = UpcomingCryptoSerializer


# --- API: –î–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç—ã ---
class CryptoDetailAPIView(generics.RetrieveAPIView):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç—ã –ø–æ ID, –≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω–æ–º–∏–∫—É –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    """
    queryset = UpcomingCrypto.objects.all()
    serializer_class = UpcomingCryptoSerializer
    lookup_field = 'id'

    def retrieve(self, request, *args, **kwargs):
        instance = self.get_object()
        data = self.get_serializer(instance).data

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω–æ–º–∏–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã cryptorank_tokenomics
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT tokenomics FROM cryptorank_tokenomics WHERE project_name = %s",
                [instance.project_name]
            )
            row = cursor.fetchone()
            if row:
                # –ï—Å–ª–∏ tokenomics —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞—Ä—Å–∏–º
                tokenomics_data = row[0]
                if isinstance(tokenomics_data, str):
                    import json
                    try:
                        tokenomics_data = json.loads(tokenomics_data)
                    except:
                        tokenomics_data = None
                data['tokenomics'] = tokenomics_data
            else:
                data['tokenomics'] = None

        return Response(data)


# --- API: –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ (–≤—Å—è —Ç–∞–±–ª–∏—Ü–∞) ---
class TokenomicsDetailedView(generics.ListAPIView):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—å—é—à–∫–∏ tokenomics_detailed
    """

    def get_queryset(self):
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM tokenomics_detailed")
            columns = [col[0] for col in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def list(self, request, *args, **kwargs):
        return Response(self.get_queryset())


# --- API: OHLC (—á—Ç–µ–Ω–∏–µ –∏–∑ ohlc_<symbol>) ---
class OHLCDataView(generics.GenericAPIView):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OHLC-–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ohlc_<symbol>
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–ª–æ–Ω–∫—É `date`, –∞ –Ω–µ `timestamp`
    """

    def get(self, request, symbol):
        symbol_lower = symbol.strip().lower()
        table_name = f"ohlc_{symbol_lower}"

        with connection.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = %s
                );
            """, [table_name])

            if not cursor.fetchone()[0]:
                return Response({
                    "symbol": symbol.upper(),
                    "data": []
                })

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è date –≤ —Å—Ç—Ä–æ–∫—É
            cursor.execute(f"""
                SELECT 
                    date::text as date,
                    open_price,
                    high_price,
                    low_price,
                    close_price,
                    volume_usd as volume,
                    change_percent,
                    market_cap
                FROM {table_name}
                ORDER BY date ASC
            """)

            columns = [col[0] for col in cursor.description]
            rows = cursor.fetchall()
            data = [dict(zip(columns, row)) for row in rows]

        return Response({
            "symbol": symbol.upper(),
            "data": data
        })


# --- API: –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
@api_view(['POST'])
def trigger_parsing(request):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Celery-–∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    task = run_full_parsing_pipeline.delay()
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {task.id}")
    return Response({
        "status": "success",
        "message": "Parsing started",
        "task_id": task.id
    })


# --- API: –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
def api_root(request):
    """
    –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ API
    """
    return HttpResponse("""
    <h1>üöÄ Crypto Backend API</h1>
    <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</p>
    <ul>
        <li><a href="/admin">–ê–¥–º–∏–Ω–∫–∞ Django</a></li>
        <li><a href="/api/coins/">–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç</a></li>
        <li><a href="/api/tokenomics-detailed/">–î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∏</a></li>
        <li><a href="/api/trigger-parsing/" target="_blank">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</a></li>
    </ul>
    """)