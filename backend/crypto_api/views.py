# backend/crypto_api/views.py
from rest_framework import generics
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.http import HttpResponse
from django.core import management
from django.conf import settings
import json
import psycopg2
from .models import UpcomingCrypto
from .serializers import UpcomingCryptoSerializer

# --- –ú–æ–¥–µ–ª–∏ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã ---
class CryptoListAPIView(generics.ListAPIView):
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö upcoming-–ø—Ä–æ–µ–∫—Ç–æ–≤
    GET /api/coins/
    """
    queryset = UpcomingCrypto.objects.all()
    serializer_class = UpcomingCryptoSerializer


class CryptoDetailAPIView(generics.RetrieveAPIView):
    """
    –î–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    GET /api/coins/<id>/
    """
    queryset = UpcomingCrypto.objects.all()
    serializer_class = UpcomingCryptoSerializer


# --- –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
@api_view(['POST'])
def trigger_parsing(request):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Celery
    POST /api/trigger-parsing/
    """
    def run():
        management.call_command('run_parsers')
    import threading
    thread = threading.Thread(target=run)
    thread.start()
    return Response({
        "status": "success",
        "message": "Parsing started"
    })


# --- –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ (–∏–∑ –≤—å—é—à–∫–∏ tokenomics_detailed) ---
# --- –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã cryptorank_tokenomics) ---
class TokenomicsDetailedView(generics.ListAPIView):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã cryptorank_tokenomics
    GET /api/tokenomics-detailed/
    """
    def get(self, request, *args, **kwargs):
        try:
            conn = psycopg2.connect(
                host=settings.DATABASES['default']['HOST'],
                port=settings.DATABASES['default']['PORT'],
                database=settings.DATABASES['default']['NAME'],
                user=settings.DATABASES['default']['USER'],
                password=settings.DATABASES['default']['PASSWORD']
            )
            cursor = conn.cursor()

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cryptorank_tokenomics
            cursor.execute("SELECT project_name, tokenomics FROM cryptorank_tokenomics;")
            rows = cursor.fetchall()
            conn.close()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, —Ä–∞—Å–∫—Ä—ã–≤–∞—è JSONB –ø–æ–ª–µ `tokenomics`
            data = []
            for row in rows:
                project_name, tokenomics_json = row
                # –î–æ–±–∞–≤–ª—è–µ–º project_name –≤–Ω—É—Ç—Ä—å –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∏
                if isinstance(tokenomics_json, dict):
                    tokenomics_json['project_name'] = project_name
                    data.append(tokenomics_json)
                else:
                    data.append({
                        'project_name': project_name,
                        'error': 'Invalid tokenomics data',
                        'raw': tokenomics_json
                    })

            return Response(data)

        except Exception as e:
            return Response({"error": f"Database error: {str(e)}"}, status=500)


# --- OHLC –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É ---
class OHLCDataView(generics.GenericAPIView):
    """
    –ü–æ–ª—É—á–∞–µ—Ç OHLC-–¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É –º–æ–Ω–µ—Ç—ã
    GET /api/ohlc/<symbol>/
    –ü—Ä–∏–º–µ—Ä: /api/ohlc/pvt/
    """
    def get(self, request, symbol):
        table_name = f"ohlc_{symbol.lower()}"
        try:
            conn = psycopg2.connect(
                host=settings.DATABASES['default']['HOST'],
                port=settings.DATABASES['default']['PORT'],
                database=settings.DATABASES['default']['NAME'],
                user=settings.DATABASES['default']['USER'],
                password=settings.DATABASES['default']['PASSWORD']
            )
            cursor = conn.cursor()
            cursor.execute(f"""
                SELECT 
                    date, open_price, high_price, low_price, med_price,
                    close_price, change_percent, volume_usd, change_volume_percent, market_cap
                FROM {table_name}
                ORDER BY date DESC;
            """)
            rows = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]
            data = [dict(zip(columns, row)) for row in rows]
            conn.close()
            return Response(data)
        except psycopg2.errors.UndefinedTable:
            return Response([], status=200)
        except Exception as e:
            return Response({"error": f"Database error: {str(e)}"}, status=500)


# --- –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
def api_root(request):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
    """
    return HttpResponse("""
    <h1>üöÄ Crypto Backend API</h1>
    <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</p>
    <ul>
        <li><a href="/admin">–ê–¥–º–∏–Ω–∫–∞</a></li>
        <li><a href="/api/coins/">–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç</a></li>
        <li><a href="/api/tokenomics-detailed/">–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞</a></li>
        <li><a href="/api/trigger-parsing/" target="_blank">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</a></li>
    </ul>
    """)