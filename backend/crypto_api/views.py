# backend/crypto_api/views.py
from rest_framework import generics
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.http import HttpResponse
from django.core import management
import threading
import json
import psycopg2
from django.conf import settings
import psycopg2.extras  # –î–ª—è RealDictCursor
import re

# ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ò–ú–ü–û–†–¢–´
from .models import UpcomingCrypto
from .serializers import UpcomingCryptoSerializer


# --- 1. –°–ø–∏—Å–æ–∫ –∏ –¥–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç ---
class CryptoListAPIView(generics.ListAPIView):
    """
    GET /api/coins/ ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
    """
    queryset = UpcomingCrypto.objects.all()
    serializer_class = UpcomingCryptoSerializer


class CryptoDetailAPIView(generics.RetrieveAPIView):
    """
    GET /api/coins/<id>/ ‚Äî –¥–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
    """
    queryset = UpcomingCrypto.objects.all()
    serializer_class = UpcomingCryptoSerializer


# --- 2. –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
@api_view(['POST'])
def trigger_parsing(request):
    """
    POST /api/trigger-parsing/ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç run_parsers
    """
    def run():
        try:
            management.call_command('run_parsers')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

    thread = threading.Thread(target=run)
    thread.start()
    return Response({
        "status": "success",
        "message": "Parsing started"
    })


# --- 3. –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã cryptorank_tokenomics) ---
class TokenomicsDetailedView(generics.GenericAPIView):
    """
    GET /api/tokenomics-detailed/ ‚Äî –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∏
    """
    def get(self, request, *args, **kwargs):
        try:
            conn = psycopg2.connect(
                host=settings.DATABASES['default']['HOST'],
                port=settings.DATABASES['default']['PORT'],
                database=settings.DATABASES['default']['NAME'],
                user=settings.DATABASES['default']['USER'],
                password=settings.DATABASES['default']['PASSWORD']
            )
            cursor = conn.cursor()

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cryptorank_tokenomics
            cursor.execute("SELECT project_name, tokenomics FROM cryptorank_tokenomics;")
            rows = cursor.fetchall()
            conn.close()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫: —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º JSONB –ø–æ–ª–µ `tokenomics`
            data = []
            for row in rows:
                project_name, tokenomics_json = row
                if isinstance(tokenomics_json, dict):
                    tokenomics_json['project_name'] = project_name
                    data.append(tokenomics_json)
                else:
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ JSON, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                    try:
                        parsed = json.loads(tokenomics_json)
                        parsed['project_name'] = project_name
                        data.append(parsed)
                    except:
                        data.append({
                            'project_name': project_name,
                            'error': 'Invalid tokenomics data',
                            'raw': str(tokenomics_json)
                        })

            return Response(data)

        except Exception as e:
            return Response({
                "error": f"Database error: {str(e)}"
            }, status=500)


# --- 4. OHLC –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É ---
def normalize_symbol(symbol):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã –Ω–∞ _
    normalized = re.sub(r'[^a-zA-Z0-9]+', '_', symbol.strip().lower())
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –≤–µ–¥—É—â–∏–µ/–∫–æ–Ω–µ—á–Ω—ã–µ _
    normalized = re.sub(r'_+', '_', normalized).strip('_')
    return normalized


class OHLCDataView(generics.GenericAPIView):
    """
    GET /api/ohlc/<symbol>/ ‚Äî –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (Open, High, Low, Close –∏ —Ç.–¥.)
    –ü—Ä–∏–º–µ—Ä: /api/ohlc/pvt/
    """
    def get(self, request, symbol):
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª
        table_name = f"ohlc_{normalize_symbol(symbol)}"
        print(f"üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")

        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = psycopg2.connect(
                host=settings.DATABASES['default']['HOST'],
                port=settings.DATABASES['default']['PORT'],
                database=settings.DATABASES['default']['NAME'],
                user=settings.DATABASES['default']['USER'],
                password=settings.DATABASES['default']['PASSWORD']
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RealDictCursor –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
            cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
            cursor.execute("""
                SELECT tablename FROM pg_tables 
                WHERE schemaname='public' AND LOWER(tablename) = %s;
            """, (table_name,))
            table_check = cursor.fetchone()

            if not table_check:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return Response([], status=200)

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"""
                SELECT 
                    date, open_price, high_price, low_price, med_price,
                    close_price, change_percent, volume_usd, change_volume_percent, market_cap
                FROM {table_name}
                ORDER BY date ASC;
            """)
            rows = cursor.fetchall()
            conn.close()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            data = []
            for row in rows:
                item = {}
                for key, value in row.items():
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal, datetime –∏ None –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã
                    if isinstance(value, (int, float)):
                        item[key] = float(value) if isinstance(value, float) else value
                    elif isinstance(value, str):
                        item[key] = value
                    elif value is None:
                        item[key] = None
                    else:
                        item[key] = str(value)  # –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                data.append(item)

            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –∏–∑ {table_name}")
            return Response(data)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ OHLC: {e}")
            return Response({"error": f"Database error: {str(e)}"}, status=500)


# --- 5. –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
def api_root(request):
    """
    GET /api/ ‚Äî –ø—Ä–æ—Å—Ç–∞—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏
    """
    return HttpResponse("""
    <h1>üöÄ Crypto Backend API</h1>
    <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</p>
    <ul>
        <li><a href="/admin">–ê–¥–º–∏–Ω–∫–∞</a></li>
        <li><a href="/api/coins/">–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç</a></li>
        <li><a href="/api/tokenomics-detailed/">–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞</a></li>
        <li><a href="/api/trigger-parsing/" target="_blank">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥</a></li>
    </ul>
    """)